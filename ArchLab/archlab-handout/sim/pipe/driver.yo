                            | #######################################################################
                            | # Test for copying block of size 3;
                            | #######################################################################
0x000:                      |   .pos 0
0x000: 30f49803000000000000 | main:  irmovq Stack, %rsp    # Set up stack pointer
                            | 
                            |   # Set up arguments for copy function and then invoke it
0x00a: 30f20300000000000000 |   irmovq $3, %rdx    # src and dst have 3 elements
0x014: 30f6f802000000000000 |   irmovq dest, %rsi  # dst array
0x01e: 30f7c802000000000000 |   irmovq src, %rdi  # src array
0x028: 803b00000000000000   |   call ncopy     
0x031: 805c01000000000000   |   call check          # Call checker code
0x03a: 00                   |   halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |   # Loop header
0x03b: 6300                 |   xorq %rax,%rax    # count = 0;
0x03d: 6222                 |   andq %rdx,%rdx    # len <= 0?
0x03f: 715b01000000000000   |   jle Done    # if so, goto Done:
0x048: c0f2fbffffffffffffff |   iaddq $-5, %rdx # Check if it goes negative
0x052: 724f01000000000000   |   jl Last5
                            | 
0x05b:                      | MainLoop:
0x05b: 50870000000000000000 |   mrmovq (%rdi), %r8
0x065: 50970800000000000000 |   mrmovq 8(%rdi), %r9
0x06f: 50a71000000000000000 |   mrmovq 16(%rdi), %r10
0x079: 50b71800000000000000 |   mrmovq 24(%rdi), %r11
0x083: 50c72000000000000000 |   mrmovq 32(%rdi), %r12
                            | 
0x08d: 40860000000000000000 |   rmmovq %r8, (%rsi)
0x097: 40960800000000000000 |   rmmovq %r9, 8(%rsi)
0x0a1: 40a61000000000000000 |   rmmovq %r10, 16(%rsi)
0x0ab: 40b61800000000000000 |   rmmovq %r11, 24(%rsi)
0x0b5: 40c62000000000000000 |   rmmovq %r12, 32(%rsi)
                            | 
0x0bf: 6288                 |   andq %r8, %r8
0x0c1: 71d400000000000000   |   jle N2
0x0ca: c0f00100000000000000 |   iaddq $1, %rax
0x0d4:                      | N2:
0x0d4: 6299                 |   andq %r9, %r9
0x0d6: 71e900000000000000   |   jle N3
0x0df: c0f00100000000000000 |   iaddq $1, %rax
0x0e9:                      | N3:
0x0e9: 62aa                 |   andq %r10, %r10
0x0eb: 71fe00000000000000   |   jle N4
0x0f4: c0f00100000000000000 |   iaddq $1, %rax
0x0fe:                      | N4:
0x0fe: 62bb                 |   andq %r11, %r11
0x100: 711301000000000000   |   jle N5
0x109: c0f00100000000000000 |   iaddq $1, %rax
0x113:                      | N5:
0x113: 62cc                 |   andq %r12, %r12
0x115: 712801000000000000   |   jle Final
0x11e: c0f00100000000000000 |   iaddq $1, %rax
                            | 
0x128:                      | Final:
0x128: c0f72800000000000000 |   iaddq $40, %rdi
0x132: c0f62800000000000000 |   iaddq $40, %rsi
0x13c: c0f2fbffffffffffffff |   iaddq $-5, %rdx
0x146: 755b00000000000000   |   jge MainLoop
                            | 
0x14f:                      | Last5:
0x14f: c0f20500000000000000 |   iaddq $5, %rdx # Restore from negative
0x159: 6311                 |   xorq %rcx, %rcx
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x15b:                      | Done:
0x15b: 90                   |   ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x15c:                      | End:
                            | #/* $end ncopy-ys */
                            | 
0x15c:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 3.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x15c:                      | check:
                            |   # Return value test
0x15c: 30fa0300000000000000 |   irmovq $3,%r10
0x166: 61a0                 |   subq %r10,%rax
0x168: 738401000000000000   |   je checkb
0x171: 30f0bbbb000000000000 |   irmovq $0xbbbb,%rax  # Failed test #1
0x17b: 70c202000000000000   |   jmp cdone
0x184:                      | checkb:
                            |   # Code length check
0x184: 30f05c01000000000000 |   irmovq EndFun,%rax
0x18e: 30f23b00000000000000 |   irmovq StartFun,%rdx
0x198: 6120                 |   subq %rdx,%rax
0x19a: 30f2e803000000000000 |   irmovq $1000,%rdx
0x1a4: 6102                 |   subq %rax,%rdx
0x1a6: 75c201000000000000   |   jge checkm
0x1af: 30f0cccc000000000000 |   irmovq $0xcccc,%rax  # Failed test #2
0x1b9: 70c202000000000000   |   jmp cdone
0x1c2:                      | checkm:
0x1c2: 30f2f802000000000000 |   irmovq dest, %rdx # Pointer to next destination location
0x1cc: 30f3c802000000000000 |   irmovq src,%rbx   # Pointer to next source location
0x1d6: 30f70300000000000000 |   irmovq $3,%rdi  # Count
0x1e0: 6277                 |   andq %rdi,%rdi
0x1e2: 734002000000000000   |   je checkpre         # Skip check if count = 0
0x1eb:                      | mcloop:
0x1eb: 50020000000000000000 |   mrmovq (%rdx),%rax
0x1f5: 50630000000000000000 |   mrmovq (%rbx),%rsi
0x1ff: 6160                 |   subq %rsi,%rax
0x201: 731d02000000000000   |   je  mok
0x20a: 30f0dddd000000000000 |   irmovq $0xdddd,%rax # Failed test #3
0x214: 70c202000000000000   |   jmp cdone
0x21d:                      | mok:
0x21d: 30f00800000000000000 |   irmovq $8,%rax
0x227: 6002                 |   addq %rax,%rdx    # dest ++
0x229: 6003                 |   addq %rax,%rbx    # src++
0x22b: 30f00100000000000000 |   irmovq $1,%rax
0x235: 6107                 |   subq %rax,%rdi    # cnt--
0x237: 76eb01000000000000   |   jg mcloop
0x240:                      | checkpre:
                            |   # Check for corruption
0x240: 30f2f002000000000000 |   irmovq Predest,%rdx
0x24a: 50020000000000000000 |   mrmovq (%rdx), %rax  # Get word before destination
0x254: 30f2fadebc0000000000 |   irmovq $0xbcdefa, %rdx
0x25e: 6120                 |   subq %rdx,%rax
0x260: 737c02000000000000   |   je checkpost
0x269: 30f0eeee000000000000 |   irmovq $0xeeee,%rax  # Failed test #4
0x273: 70c202000000000000   |   jmp cdone
0x27c:                      | checkpost:
                            |   # Check for corruption
0x27c: 30f21003000000000000 |   irmovq Postdest,%rdx
0x286: 50020000000000000000 |   mrmovq (%rdx), %rax  # Get word after destination
0x290: 30f2bcfade0000000000 |   irmovq $0xdefabc, %rdx
0x29a: 6120                 |   subq %rdx,%rax
0x29c: 73b802000000000000   |   je checkok
0x2a5: 30f0eeee000000000000 |   irmovq $0xeeee,%rax # Failed test #4
0x2af: 70c202000000000000   |   jmp cdone
0x2b8:                      | checkok:
                            |   # Successful checks
0x2b8: 30f0aaaa000000000000 |   irmovq $0xaaaa,%rax
0x2c2:                      | cdone:
0x2c2: 90                   |   ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2c8:                      |   .align 8
0x2c8:                      | src:
0x2c8: 0100000000000000     | 	.quad 1
0x2d0: 0200000000000000     | 	.quad 2
0x2d8: 0300000000000000     | 	.quad 3
0x2e0: fadebc0000000000     |   .quad 0xbcdefa # This shouldn't get moved
                            | 
0x2f0:                      |   .align 16
0x2f0:                      | Predest:
0x2f0: fadebc0000000000     |   .quad 0xbcdefa
0x2f8:                      | dest:
0x2f8: abefcd0000000000     | 	.quad 0xcdefab
0x300: abefcd0000000000     | 	.quad 0xcdefab
0x308: abefcd0000000000     | 	.quad 0xcdefab
0x310:                      | Postdest:
0x310: bcfade0000000000     |   .quad 0xdefabc
                            | 
0x318:                      | .align 8
                            | # Run time stack
0x318: 0000000000000000     |   .quad 0
0x320: 0000000000000000     |   .quad 0
0x328: 0000000000000000     |   .quad 0
0x330: 0000000000000000     |   .quad 0
0x338: 0000000000000000     |   .quad 0
0x340: 0000000000000000     |   .quad 0
0x348: 0000000000000000     |   .quad 0
0x350: 0000000000000000     |   .quad 0
0x358: 0000000000000000     |   .quad 0
0x360: 0000000000000000     |   .quad 0
0x368: 0000000000000000     |   .quad 0
0x370: 0000000000000000     |   .quad 0
0x378: 0000000000000000     |   .quad 0
0x380: 0000000000000000     |   .quad 0
0x388: 0000000000000000     |   .quad 0
0x390: 0000000000000000     |   .quad 0
                            | 
0x398:                      | Stack:

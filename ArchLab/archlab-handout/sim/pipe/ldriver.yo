                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      |   .pos 0
0x000: 30f4c806000000000000 | main:  irmovq Stack, %rsp    # Set up stack pointer
                            | 
                            |   # Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 |   irmovq $63, %rdx    # src and dst have 63 elements
0x014: 30f64804000000000000 |   irmovq dest, %rsi  # dst array
0x01e: 30f73802000000000000 |   irmovq src, %rdi  # src array
0x028: 803200000000000000   |   call ncopy     
0x031: 00                   |   halt      # should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Michael Zhang <zhan4854@umn.edu>
                            | #
                            | # Firstly, I made use of iaddq, in order to prevent having to store
                            | # constants into memory in order to add them. This reduces the number
                            | # of instructions required for incrementing counters. This got my
                            | # CPE down to about 12.7.
                            | #
                            | # I also used the loop unrolling technique to unroll the loop 5
                            | # times. Because it was easy to use jle to compare to 0, I kept
                            | # processing 5 elements at a time until I got to the last 4, at
                            | # which point the counter would go negative. Then I would manually
                            | # add back and execute the instructions 1-by-1 (since there are
                            | # only at most 4 left).
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |   # Loop header
0x032: 6300                 |   xorq %rax,%rax    # count = 0;
0x034: 6222                 |   andq %rdx,%rdx    # len <= 0?
0x036: 713602000000000000   |   jle Done    # if so, goto Done:
0x03f: c0f2fbffffffffffffff |   iaddq $-5, %rdx # Check if it goes negative
0x049: 724601000000000000   |   jl Last4
                            | 
0x052:                      | MainLoop:
0x052: 50870000000000000000 |   mrmovq (%rdi), %r8
0x05c: 50970800000000000000 |   mrmovq 8(%rdi), %r9
0x066: 50a71000000000000000 |   mrmovq 16(%rdi), %r10
0x070: 50b71800000000000000 |   mrmovq 24(%rdi), %r11
0x07a: 50c72000000000000000 |   mrmovq 32(%rdi), %r12
                            | 
0x084: 40860000000000000000 |   rmmovq %r8, (%rsi)
0x08e: 40960800000000000000 |   rmmovq %r9, 8(%rsi)
0x098: 40a61000000000000000 |   rmmovq %r10, 16(%rsi)
0x0a2: 40b61800000000000000 |   rmmovq %r11, 24(%rsi)
0x0ac: 40c62000000000000000 |   rmmovq %r12, 32(%rsi)
                            | 
0x0b6: 6288                 |   andq %r8, %r8
0x0b8: 71cb00000000000000   |   jle N2
0x0c1: c0f00100000000000000 |   iaddq $1, %rax
0x0cb:                      | N2:
0x0cb: 6299                 |   andq %r9, %r9
0x0cd: 71e000000000000000   |   jle N3
0x0d6: c0f00100000000000000 |   iaddq $1, %rax
0x0e0:                      | N3:
0x0e0: 62aa                 |   andq %r10, %r10
0x0e2: 71f500000000000000   |   jle N4
0x0eb: c0f00100000000000000 |   iaddq $1, %rax
0x0f5:                      | N4:
0x0f5: 62bb                 |   andq %r11, %r11
0x0f7: 710a01000000000000   |   jle N5
0x100: c0f00100000000000000 |   iaddq $1, %rax
0x10a:                      | N5:
0x10a: 62cc                 |   andq %r12, %r12
0x10c: 711f01000000000000   |   jle Final
0x115: c0f00100000000000000 |   iaddq $1, %rax
                            | 
0x11f:                      | Final:
0x11f: c0f72800000000000000 |   iaddq $40, %rdi
0x129: c0f62800000000000000 |   iaddq $40, %rsi
0x133: c0f2fbffffffffffffff |   iaddq $-5, %rdx
0x13d: 755200000000000000   |   jge MainLoop
                            | 
0x146:                      | Last4:
0x146: c0f20400000000000000 |   iaddq $4, %rdx # Restore from negative
0x150: 723602000000000000   |   jl Done
0x159: 50870000000000000000 |   mrmovq (%rdi), %r8
0x163: 40860000000000000000 |   rmmovq %r8, (%rsi)
0x16d: 6288                 |   andq %r8, %r8
0x16f: 718201000000000000   |   jle Last3
0x178: c0f00100000000000000 |   iaddq $1, %rax
0x182:                      | Last3:
0x182: c0f2ffffffffffffffff |   iaddq $-1, %rdx
0x18c: 723602000000000000   |   jl Done
0x195: 50870800000000000000 |   mrmovq 8(%rdi), %r8
0x19f: 40860800000000000000 |   rmmovq %r8, 8(%rsi)
0x1a9: 6288                 |   andq %r8, %r8
0x1ab: 71be01000000000000   |   jle Last2
0x1b4: c0f00100000000000000 |   iaddq $1, %rax
0x1be:                      | Last2:
0x1be: c0f2ffffffffffffffff |   iaddq $-1, %rdx
0x1c8: 723602000000000000   |   jl Done
0x1d1: 50871000000000000000 |   mrmovq 16(%rdi), %r8
0x1db: 40861000000000000000 |   rmmovq %r8, 16(%rsi)
0x1e5: 6288                 |   andq %r8, %r8
0x1e7: 71fa01000000000000   |   jle Last1
0x1f0: c0f00100000000000000 |   iaddq $1, %rax
0x1fa:                      | Last1:
0x1fa: c0f2ffffffffffffffff |   iaddq $-1, %rdx
0x204: 723602000000000000   |   jl Done
0x20d: 50871800000000000000 |   mrmovq 24(%rdi), %r8
0x217: 40861800000000000000 |   rmmovq %r8, 24(%rsi)
0x221: 6288                 |   andq %r8, %r8
0x223: 713602000000000000   |   jle Done
0x22c: c0f00100000000000000 |   iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x236:                      | Done:
0x236: 90                   |   ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x237:                      | End:
                            | #/* $end ncopy-ys */
                            | 
0x237:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x238:                      |   .align 8
0x238:                      | src:
0x238: ffffffffffffffff     | 	.quad -1
0x240: 0200000000000000     | 	.quad 2
0x248: 0300000000000000     | 	.quad 3
0x250: 0400000000000000     | 	.quad 4
0x258: 0500000000000000     | 	.quad 5
0x260: faffffffffffffff     | 	.quad -6
0x268: 0700000000000000     | 	.quad 7
0x270: f8ffffffffffffff     | 	.quad -8
0x278: 0900000000000000     | 	.quad 9
0x280: 0a00000000000000     | 	.quad 10
0x288: 0b00000000000000     | 	.quad 11
0x290: 0c00000000000000     | 	.quad 12
0x298: f3ffffffffffffff     | 	.quad -13
0x2a0: 0e00000000000000     | 	.quad 14
0x2a8: f1ffffffffffffff     | 	.quad -15
0x2b0: 1000000000000000     | 	.quad 16
0x2b8: efffffffffffffff     | 	.quad -17
0x2c0: 1200000000000000     | 	.quad 18
0x2c8: 1300000000000000     | 	.quad 19
0x2d0: 1400000000000000     | 	.quad 20
0x2d8: ebffffffffffffff     | 	.quad -21
0x2e0: eaffffffffffffff     | 	.quad -22
0x2e8: e9ffffffffffffff     | 	.quad -23
0x2f0: 1800000000000000     | 	.quad 24
0x2f8: e7ffffffffffffff     | 	.quad -25
0x300: e6ffffffffffffff     | 	.quad -26
0x308: 1b00000000000000     | 	.quad 27
0x310: e4ffffffffffffff     | 	.quad -28
0x318: e3ffffffffffffff     | 	.quad -29
0x320: e2ffffffffffffff     | 	.quad -30
0x328: 1f00000000000000     | 	.quad 31
0x330: 2000000000000000     | 	.quad 32
0x338: 2100000000000000     | 	.quad 33
0x340: 2200000000000000     | 	.quad 34
0x348: ddffffffffffffff     | 	.quad -35
0x350: 2400000000000000     | 	.quad 36
0x358: dbffffffffffffff     | 	.quad -37
0x360: 2600000000000000     | 	.quad 38
0x368: d9ffffffffffffff     | 	.quad -39
0x370: d8ffffffffffffff     | 	.quad -40
0x378: d7ffffffffffffff     | 	.quad -41
0x380: d6ffffffffffffff     | 	.quad -42
0x388: d5ffffffffffffff     | 	.quad -43
0x390: d4ffffffffffffff     | 	.quad -44
0x398: d3ffffffffffffff     | 	.quad -45
0x3a0: 2e00000000000000     | 	.quad 46
0x3a8: d1ffffffffffffff     | 	.quad -47
0x3b0: d0ffffffffffffff     | 	.quad -48
0x3b8: cfffffffffffffff     | 	.quad -49
0x3c0: 3200000000000000     | 	.quad 50
0x3c8: cdffffffffffffff     | 	.quad -51
0x3d0: 3400000000000000     | 	.quad 52
0x3d8: cbffffffffffffff     | 	.quad -53
0x3e0: 3600000000000000     | 	.quad 54
0x3e8: c9ffffffffffffff     | 	.quad -55
0x3f0: 3800000000000000     | 	.quad 56
0x3f8: c7ffffffffffffff     | 	.quad -57
0x400: c6ffffffffffffff     | 	.quad -58
0x408: c5ffffffffffffff     | 	.quad -59
0x410: 3c00000000000000     | 	.quad 60
0x418: 3d00000000000000     | 	.quad 61
0x420: 3e00000000000000     | 	.quad 62
0x428: 3f00000000000000     | 	.quad 63
0x430: fadebc0000000000     |   .quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      |   .align 16
0x440:                      | Predest:
0x440: fadebc0000000000     |   .quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640:                      | Postdest:
0x640: bcfade0000000000     |   .quad 0xdefabc
                            | 
0x648:                      | .align 8
                            | # Run time stack
0x648: 0000000000000000     |   .quad 0
0x650: 0000000000000000     |   .quad 0
0x658: 0000000000000000     |   .quad 0
0x660: 0000000000000000     |   .quad 0
0x668: 0000000000000000     |   .quad 0
0x670: 0000000000000000     |   .quad 0
0x678: 0000000000000000     |   .quad 0
0x680: 0000000000000000     |   .quad 0
0x688: 0000000000000000     |   .quad 0
0x690: 0000000000000000     |   .quad 0
0x698: 0000000000000000     |   .quad 0
0x6a0: 0000000000000000     |   .quad 0
0x6a8: 0000000000000000     |   .quad 0
0x6b0: 0000000000000000     |   .quad 0
0x6b8: 0000000000000000     |   .quad 0
0x6c0: 0000000000000000     |   .quad 0
                            | 
0x6c8:                      | Stack:
